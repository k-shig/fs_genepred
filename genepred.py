#!/usr/bin/env python
# -*- coding:utf-8 -*-


import math

# model : to be discussed
states = ("N", "E1", "E2", "E3", "I1", "I2", "I3")

# sequence : read files?
sequence = "TATTAGGTCTATGGAAGCCTAAGTTAAAACGCCAGCCTGGCCTTAAAATTACCTCCGCCTGCCTTTCGCCTCAATCGATGCCTTATGCAAATTTTTTTTTATTTCTAAATTTTTCTCATCAAATTAATAAAAATGAGAAAATTGAATATTTGCAAGTTCTCGCGGGCAGGTTTCAAGCAGGCGTTAGTTTTTGGCTCCCCCAATTTTTTTTTGAATTTTTATTCCAAAAGTTACAGAACTAAAAGCTCTTTTTTGAAATTTTTAGACTGAAAATCAAAAATTTTAATTTAAAATTTTTTTTTTAATTTAAGAACTCAAAAAATGAAAGTTTGGTCGTTTTCCGAATATTTAAACAAAATCTACTGGGAATCTATTTGGATTTTAAAATATTATAAAGAACTGTTTTTGTTGTAAATGTAGATTTGAAAAGTTCAACAAAATAAATTTCTTACAATTTTTTTTTCAGTATTTGTTTTTTTTTGTTGCAAGAATCGTGAAAAAATATTTTTTGAAACATTTTCGGAAGCCTGATCTTATTTATACTCTTTTAGCGAACAATTTTTCAAACAAAAGTTATTTTCAAAAAAATGTTCCTAAAAAATAATTTAAAATTAAAAAAAAATTACAGAAAAAATCCCCAGTTTTTAGAAAATTAAATTTTAGAAATTAGGAAAATTCCAAAACTCTGTGATTGTCACATTCCAAGCAGGGTGTGCGGCTGATTGATTTTTTTGGTTGTCGGCTGGTAGCACTAAAATGGGTAGAGCCGGTTTTAAATTTTCTTCCTGTACCGTTCCAATTTGTTACTATCAGTAAACTCCCCCTTAGTCACCGTATTATTGGAAAAAAGTGTTCCTGTAAATATTTGTTATCAATTTTGAAATGTTGCGTATGTATAAATAACATCTTTTTTGACCGTTTTAATCATTGCGTTTCAAAATTTCAATTTCTAAATATTCAAATATTTTCAGGTCAACTAAAACTCTAAGGCGCACGAGCAATGCGCTCAAAACATGTGCTGTACATAGCTATACTGTTCAGTTCAATTTTTGGAGGGAAAGGTGAGTGGAATTACGTGGCCTAGAAAACCTCCTGACCTAGAATTTATTCCACATAGCTAAGACTAGGCAAAAAAATATTTAAAAATGGGTGGCCTAGAAATATCGTTTTTTATAAGCAGGCAAATTGCATGATCGGTGCCGTCATGGTCTAGGTTGTTGGATGACCAAAAAAATTCCTTTCGGAGGACCGGGTGGAAAATTTGTCAACAGAGCGGACCTGCTATCTTAAATGTTTAAGAGGCTTTTGATCTTGAGCCGATCTTTGAAAATGTGTTCAAGATCTGTTCAAATAGTAGCTGATTTCTTGTAAAGAGAGACTAATTGCAAACAGTTAAGGAAGATGGACACCAAGTGCGCTATATTGATAATTTTTGGAATAGCTCAATTGAACGTGTCTGTACTATTTTCTGTGCTAGATTTTCAAAATGTTAGGTTAAAAATGAATGGGATAAAAATTACAAAAAAATGTTCAAAAATTCTCAAATTGCGTATTTCAAAACTTCAAATTCCAAACAAAAATTTTCCTTGTCCGCAACATTTCTGCCCCTCCAAAATTTCAAAATCACTGATAGCTGTTTACTGATAAGCTCTGTGTGCCACCCGGTGTCTGTGTTCTTTTTCATAAAAATCACATAGTTTACCTAAGAAAGTGTTCATGTTTACACCTAAATAACAAAATGTGTATCTTTCGAATTTCAACAAAGTGGTGGTTTCCCAACCAATTTTGGAAAAATTCCTGAAATTCCCGAGTTATCAGGAACAATTTCCTGTTTTACTGACCTTGCCATCGTCGCCCAATACAAGAAAAAGGATAAAATGTACAAAAAATAGGCAAACAAACAGAATAAATATAGGTGCGAAAATGATACGAAAATAATTGTTTCGGGTGGCGGGGCAAATGTTTGCTCTGCTCCGCTACTGACCGGAAATTTGCGCGTTCAGTGAGAAAATGCACGAATCGGTGTGAAAATGTAGTGAAGGGAGCATGTGTGACCTAGAAATTTCAATAAGGAACCTAGGCCATCATATAGATTTTGGTGGCCTGGAAATCAAAAACTCGTAACATTTATCTTTTCAGGAATCCAACAAAATGAGGAATTTCAAAGATACGACGGATGGTACAACAATCTGGCGAATAGTGAATGGGGTTCTGCTGGTAGGTTTTTTCGGAAGAGAAATGACGTTACATTGACCTACTCCTTCAGGAAGTCGGCTGCATAGAGATGCACGTTCCTACTACTCAGACGGTGTATATTCAGTGAATAACTCACTTCCGTCCGCCCGTGAACTCTCCGATATACTATTCAAAGGAGAGTCCGGTATACCTAATACAAGAGGATGCACGACTTTATTGGCATTTTTCAGTTCGTTTTTATTGCCCTCTACCTCAAAAATTAGTAATAATAATTATAGGTCAAGTAGTTGCTTATGAAATAATGCAATCAAATGGAGTATCCTGTCCACTAGAGACACTTAAAATTCAAGTACCCCTATGTGATAATGTATTTGATAAAGAATGTGAGGGAAAGACAGAAATCCCATTTACACGTGCCAAATACGATAAAGCAACTGGAAATGGGCTCAACTCACCTCGAGAACAAATCAATGAACGGACTTCATGGATTGATGGATCATTCATCTATGGTACCACCCAGCCATGGGTGTCCTCATTAAGATCTTTCAAACAAGGGCGGTTGGCTGAAGGTGTACCTGGATATCCACCACTTAACAACCCACATATTCCATTGAATAACCCCGCTCCGCCACAAGTACATCGATTGATGAGTCCAGATAGATTATTTAGTGAGTTCATAGTTTTATAGAAAAGTATAAATATTTAAACTTGAAGTGTTGGGAGACTCGCGTGTGAATGAGAATCCAGGTCTTCTCTCATTTGGTCTGATCCTCTTCCGTTGGCATAACTACAATGCAAATCAAATCCATCGAGAACATCCTGACTGGACAGACGAACAAATCTTCCAGGCAGCACGTCGTTTGGTGATTGCATCTATGCAGAAGATTATTGCATATGACTTTGTTCCAGGGCTGTTAGGTTAATCAACTATATTATAATACCTTAAACTCAGTGTTTCTTTTAAGGTGAAGACGTTCGTTTGTCAAACTACACCAAATACATGCCACATGTTCCACCTGGAATCTCGCATGCTTTTGGAGCAGCCGCCTTCAGGTTCCCTCACTCAATTGTGCCACCAGCAATGCTTCTGAGAAAACGAGGAAATAAATGTGAATTCCGGACGGAAGTTGGTGGATATCCTGCATTGAGATTGTGCCAGAATTGGTGGAATGCGCAGGATATTGTAAAGGAGTACAGTGTGGATGAGATTATTCTTGGTTAGTTCATGCTTGAGTGGTTATATAATAAAGGTTGTAATTTCAGGAATGGCAAGCCAGATAGCTGAACGAGATGATAACATAGTAGTTGAAGATCTTCGTGATTACATCTTCGGACCAATGCATTTCTCTCGTTTGGATGTTGTTGCTTCATCAATAATGAGAGGAAGGGACAATGGAGTACCACCGTATAATGAATTGAGAAGAACATTCGGACTTGCGCCAAAGACATGGGAGACAATGAATGAAGACTTTTACAAGAAGCATACTGCAAAGGTGGAGAAGTTGAAAGAGTTGTATGGAGGCAATATTTTATATTTGGATGCTTATGTAGGAGGGTTAGTTTTGGGTTTAAAGTGGAATGCTTAACTTAAAATGCGGTGAATTCGAAGAGTTTCAAGCAAAAACAATGAAAATCAATTCGTTTTAACATAACTGATTGGTTTAAGAAGTGTGGAATTTTGAATATTCACTAAATCTTCTCAAGGGTTAAAAAGTTCTCACGAGTAAACTTCTAACGGCTTCTTTTGGTCAAACTCTAAAATTTGTAGCAGGCATAAACTCTGGAAGTTGTATGTCACCTCAGTTTTATAGTGCAATTCCTTCGGTATTTCAAACGTTACCCATGCAAGGTAGTTTTTTTTGCAAATCTAGGCAGAATAAATTACGCATACTTGTTTCTTTCTCAGTGCACATATATTGGATTACGTTAATCAAACGTTATTATTTTAGAATGCTGGAAGGAGGTGAAAATGGGCCTGGAGAGTTGTTCAAAGAAATCATAAAGGATCAATTCACCCGTATTCGTGATGGAGATAGATTCTGGTTTGAGAATAAATTGAATGGATTATTCACTGATGAAGAAGTTCAAATGATTCATAGTATTACACTTCGAGATATTATCAAAGCAACCACCGATATCGATGAGACAATGCTTCAGAAGGATGTAAGTTACTTTCCAAATTTAATGGTTTATTATTATGTTCTTTTGAATTCCGCATTGCAATGTATTTATCACTCCAGGTATTCTTCTTCAAGGAAGGTGACCCGTGCCCGCAACCATTCCAAGTGAACACAACTGGACTTGAACCATGTGTTCCATTTATGCAATCAACTTATTGGACTGATAATGACACCACTTATGTTTTCACCCTAATTGGATTAGCATGTGTGCCATTAAGTGAGCTATTGCATCTAGTTCCATACAAACCAAAATGCTTTCAGTTTGCTATGGAATTGGCCGATACTTGGTTAATCGTCGCATTGCTATTGGCCACAACAGTGCTTGTGACAGCCTAACTACTGACTTTGCAAATGATGATTGTGGCGCGAAGGGAGATATTTATGGTGTAAATGCTTTGGAATGGCTTCAAGAAGAGTACATACGACAGGTCAGGATAGAAATAGAAAACACCACGTTGGCAGTAAAGAAGCCACGCGGTGGAATCCTTCGAAAAATTCGTTTTGAAACTGGACAGAAGATTGAGTTATTCCACTCTATGCCGAATCCATCAGCAATGCACGGACCATTTGTACTTCTGTCTCAAAAGAATAATCATCATTTGGTGATAAGATTGTCGTCTGATAGAGATTTATCTAAATTTTTGGATCAAATTAGACAGGCGGCTAGTGGAATCAATGCAGAGGTTATCATAAAGGATGAGGAGAATTCTGTGAGTTTACTTCAAGAAATACGTTGAATCTGGAAATTATTTCAGATTCTCTTATCCCAAGCAATCACAAAAGAACGCCGTCAAGACCGACTGGACCTGTTCTTCCGTGAAGCCTACGCAAAAGCATTCAATGATAGTGAACTTCAAGATTCGGAAACTTCATTTGACTCATCAAATGATGATATATTAAATGAGACAATATCTCGTGAGGAACTGGCAAGTGCAATGGGAATGAAAGCGAATAATGAGTTTGTGAAGAGAATGTTCGCGATGACTGCAAAACATAATGAGGATTCGCTCAGTTTCAATGAGTTTTTGACAGTCTTGAGAGAGTTTGTTAATGGTGAGTATTTCAGCATAAATTTGTTGTGATACAAAGACTACGTTCTAGAATGTTCCGGCGTGTTTCCCATTAACATAAGTTCTAATTGAATAAATATAATTTCTTAATGCAGCTTAATTACGTGTAACAGCAGTAGCGGTAAAGTTGTTTTGAACTGTCTTTGATTTTGTACGTACAAAACTACATATAAAAGGTTTTGGTTCAAGAGAGCCGAAGTCTCCTGCGAAAAGAAATTTATTTCTTCTGATCTGAATTTAAACTAGGCCGGGATTAGCGACCGATTAACATTTTGTAGGTTCATTAGCCGTGAGGTGAAACTCGGTGTCCTATGGTCGGCAATATTTCGAGATAGTAAAAGTTCTAAAGGTTATTTATTCTGAATCTGAATTTATTCGGGGGAGTCCTATAGAATTTGCGAGCACTGTAGAAAGTTCTCGTGTGACAGGGAGGTCACAACTAATATGGCATCAAAGTATTGAGAATTTAGTCAATTGTAGATTTTCTTTTACTGAACAGTAGAAAAACCAACACTGCCTTTAAAAAATGTTATGCACCACCTACTTTAATTTCCAGCTCCTCAAAAGCAAAAACTGCAAACTCTATTCAAAATGTGTGATTTGGAGGGAAAGAACAAGGTACTCCGAAAGGATCTCGCGGAACTCGTCAAGTCCCTCAATCAAACCGCTGGAGTTCACATTACTGAAAGTGTGCAGCTTCGATTATTCAATGAAGTGTTGCACTATGCAGGAGTGAGCAATGATGCCAAGTACCTGACTTACGACGATTTCAATGCTCTGTTCTCGGATATACCTGACAAGCAACCAGTTGGACTGCCGTTCAATCGAAAGAACTATCAGCCAAGTATTGGAGAGTGAGTATTCAGGAGGACTCTGACTGTATAACAATTATAACTTTTAGAACATCTTCTCTGAACTCATTTGCCGTCGTGGATCGATCCATCAACAGTTCAGCACCGCTAACTTTGATCCACAAAGTTTCAGCGTTCTTGGAGACCTATCGCCAACACGTTTTCATTGTCTTCTGCTTTGTTGCCATCAATCTTGTTCTTTTCTTCGAACGGTTTTGGCGTAAGTTCATATAATTGGGAGCTCATGTTAATTTAGTTTTCAGATTATCGTTACATGGCGGAAAACAGGGATCTCCGACGAGTAATGGGAGCTGGAATCGCTATTACTCGTGGTGCCGCGGGAGCCTTGTCATTTTGCATGGCGTTGATATTGCTGACAGTTTGTAGAAACATAATCACACTTCTTCGAGAGACAGTCATTGCGCAGTATATTCCATTTGACTCGGCTATTGCGTTCCACAAGGTGAGAAACGTTAGGGCAGCGTGTAACACATTTTTTAAATATTATTATTGCATTAGTAAATTTTGTCAAATCAGTTGTTTTTAAAAATATTTAGCATGTTCAGATATAAGGGAAAACTTGTTATTTTATTATCTGTACAGTAATGCGGAGGTTTAATGCAAGTAGGATAACTGTACTGTGCATACCCAATGTTTTGAAAAGATTTTTTAAAATAGAATACAAGCATGAAAGGAAAGATCTTTGCATCGAACATGGTGTTTCTCAGCCAGATGTGAACTTATGATATAGCGATGTTATCCTAAACTTGTAAGTGTTTAATTTTTTTAAATTTATTACGATAGTAAGATATCGTGAGGTAGAAAAAAAACACACATTAATAGATACAAACCATCACAAGTGGTTACATAAATAAAAATGGAACAAAAATAAAAAGAGATGAGAAAAAAAATAATGGCTACATTGGAGAAGAAGCAAAAAACACAAATATCGATGTATAAAAGGCAAGAATAAATGATGAATAGAAGTGAGGATAAGGTAACATTAGATCAGTGTTGCTTCATTGTGTGTAGTGTTCTGTTGACAAAAAAGTGTCTCCTAAGTTTAGATTTTCCTGTGCTCCAGATATATTTCTTTTTAGAACGAGTGTGGGTCTCTTGTTGCTCAAAAAACTCAGATGTTTTTAAGTCTACTTTACATATAAGTGTTCTGTAGAGAGGGCAGATTTTTGAATAAAAAAATAAACTATGATAAACAATGGGAAAACTAATATTTCGGACAAAGTATTGTTTATTATGACCGCCAGTATCAAAAACTCTATAATAACTGAACATTTCTAGATCGTTGCGCTCTTTGCGGCTTTCTGGGCCACTCTTCACACCGTTGGACATTGTGTCAATTTCTATCACGTTGGAACTCAAAGTCAAGAAGGTCTTGCTTGTCTCTTTCAGGAAGCATTCTTTGGGTAATACTTTACTTGAATTCATTTTTGCATTCAATCTTACTAGAATACGCACCATTAACAAACTCCCTCAAGACTGTCAACAACTTTCATCAAATAACTTTCAGATCCAACTTCCTTCCTTCAATCAGTTACTGGTTCTTCAGCACAATTACAGGTCTGACAGGAATTGCATTGGTCGCTGTCATGTGCATCATTTATGTTTTCGCGTTACCATGTTTCATTAAGAGAGCTTATCACGCATTCCGGCTCACACATCTTCTCAATATTGCCTTTTACGCACTTACTCTTCTTCATGGGCTTCCAAAGTTGTTGGATGTGAGTTTTTGCCACTGTTCGGTTCAAGAAGTTTCTTCAATATTTGTTACAGTCTCCCAAATTTGGCTACTACGTTGTTGGTCCCATCGTGTTATTTGTAATTGATCGCATAATTGGTTTGATGCAATATTACAAAAAATTAGAAATTGTAAACGCAGAAATCCTTCCATCAGATATTATATACATCGAGTACCGTCGTCCAAGAGAGTTTAAATATAAATCAGGACAATGGGTTACTGTATCATCACCATCAATATCATGTACCTTTAATGAATCTCACGCATTCTCGATTGCCTCAAGTCCACAGGATGAGAATATGAAGTTGTATATAAAAGCAGTTGGACCATGGACATGGAAGTTGAGAAGCGAATTGATAAGATCATTGAATACAGGATCGCCATTTCCATTAATCCATATGAAAGGACCATATGGTGATGGTAACCAAGAATGGATGGATTATGAAGTTGCAATAATGGTTGGAGCAGGAATCGGAGTGACTCCATATGCATCGACACTTGTTGATCTTGTACAACGAACATCAAGTGACTCATTTCACAGAGTTCGTTGCCGTAAAGTATATTTCCTATGGGTGTGCTCAACTCACAAGAACTATGAATGGTTTGTGGATGTGCTCAAGAACGTGGAAGACCAAGCAAGGTCGGGAATTTTGGAGACACATATCTTTGTCACTCAGACGTTCCACAAGTTTGATTTGAGAACTACTATGCTTGTGAGTTTATTGAAGATAATTTTCAAAATCAAACGTCAGGTTTGGTTATAAACTGATTAAAGCGGACGCATTTAAACGCAGTGGCATCTTAAGGTCTGAAGCTTTTAAACTTTAACATCTTATTTGCAGTACATTTGCGAGAAGCACTTCCGTGCCACCAACTCAGGAATTTCAATGTTTACTGGTCTCCACGCTAAGAACCATTTCGGACGGCCCAACTTCAAAGCTTTCTTCCAATTTATTCAGAGTGAACATAAGGAGGTTAGTTAAATGCTTTTTAACCTCTAAATAAAGCAAATTTGCAGCAATCCAAAATCGGAGTGTTCAGTTGTGGACCTGTAAACTTGAATGAAAGTATAGCTGAAGGATGTGCAGATGCCAACCGACAACGAGATGCTCCTTCATTTGCACATCGCTTTGAAACGTTCTAACCTTCCCTATATCATCATTATTATACATATTTTATGCTTCTTTGAGTATTCTGTGCCAGCTTTACATTTTCTGTCTAGACTTCATTTTTTTTCATTCACTGTTTTATGGGTAACAACAACAATGACTTTTAATTTTGAATAGATGTATATACAACTAAAAAGAAACAGCTCCTCCGAATAGGCTCCGCTTGTCGAGACCGGCAATTGAACGTGAGGCGGCGGTGGAGTAGAACTGGAAAAATAGGAAAAGCTTGTTGGAAGTAAGAAGTTGTGACTAATCAATAATTAGGGCCTATGCCTTGGGTATTTGGGTGTACATCTCTGATGAATCTAAATTTTTTTGGAATCATCGCTAGTAACCTTTCTCTACAATATTCATATTATGAAATACCGACCTTGTAATCAGGCTTGTCACTTTTTCGTTTTCGAATTTTCGTTTTTTCGTTATTTTCGGGTTTTTGGCGAAAATGATTTTTTCGTTTTCGTTTTCGAAAATTT"
# sequence = "TATTAGGTCTATGGAAGCCTAAGTTAAAAC"
list_sequence = list(sequence)

# model : to be discussed
# log values!
start_probability = {"N" : math.log(0.91), "E1" : math.log(pow(10, -30)), "E2" : math.log(pow(10, -30)), "E3" : math.log(pow(10, -30)), "I1" : math.log(0.03), "I2" : math.log(0.03), "I3": math.log(0.03)}

# model : to be discussed
# transition_probability = {
#     "N"  : {"N" : 0.90, "E1" : 0.10, "E2" : 0.00, "E3" : 0.00, "I1" : 0.00, "I2" : 0.00, "I3" : 0.00},
#     "E1" : {"N" : 0.00, "E1" : 0.00, "E2" : 0.95, "E3" : 0.00, "I1" : 0.05, "I2" : 0.00, "I3" : 0.00},
#     "E2" : {"N" : 0.00, "E1" : 0.00, "E2" : 0.00, "E3" : 0.95, "I1" : 0.00, "I2" : 0.05, "I3" : 0.00},
#     "E3" : {"N" : 0.01, "E1" : 0.94, "E2" : 0.00, "E3" : 0.00, "I1" : 0.00, "I2" : 0.00, "I3" : 0.05},
#     "I1" : {"N" : 0.00, "E1" : 0.00, "E2" : 0.01, "E3" : 0.00, "I1" : 0.99, "I2" : 0.00, "I3" : 0.00},
#     "I2" : {"N" : 0.00, "E1" : 0.00, "E2" : 0.00, "E3" : 0.01, "I1" : 0.00, "I2" : 0.99, "I3" : 0.00},
#     "I3" : {"N" : 0.00, "E1" : 0.01, "E2" : 0.00, "E3" : 0.00, "I1" : 0.00, "I2" : 0.00, "I3" : 0.99},
#     }

transition_probability = {
    "N"  : {"N" : 0.90, "E1" : 0.10, "E2" : pow(10, -30), "E3" : pow(10, -30), "I1" : pow(10, -30), "I2" : pow(10, -30), "I3" : pow(10, -30)},
    "E1" : {"N" : pow(10, -30), "E1" : pow(10, -30), "E2" : 0.95, "E3" : pow(10, -30), "I1" : 0.05, "I2" : pow(10, -30), "I3" : pow(10, -30)},
    "E2" : {"N" : pow(10, -30), "E1" : pow(10, -30), "E2" : pow(10, -30), "E3" : 0.95, "I1" : pow(10, -30), "I2" : 0.05, "I3" : pow(10, -30)},
    "E3" : {"N" : 0.01, "E1" : 0.94, "E2" : pow(10, -30), "E3" : pow(10, -30), "I1" : pow(10, -30), "I2" : pow(10, -30), "I3" : 0.05},
    "I1" : {"N" : pow(10, -30), "E1" : pow(10, -30), "E2" : 0.01, "E3" : pow(10, -30), "I1" : 0.99, "I2" : pow(10, -30), "I3" : pow(10, -30)},
    "I2" : {"N" : pow(10, -30), "E1" : pow(10, -30), "E2" : pow(10, -30), "E3" : 0.01, "I1" : pow(10, -30), "I2" : 0.99, "I3" : pow(10, -30)},
    "I3" : {"N" : pow(10, -30), "E1" : 0.01, "E2" : pow(10, -30), "E3" : pow(10, -30), "I1" : pow(10, -30), "I2" : pow(10, -30), "I3" : 0.99}
}

# model : to be discussed
emission_probability = {
    "N"  : {"A" : 0.10, "T" : 0.10, "G" : 0.40, "C" : 0.40},
    "E1" : {"A" : 0.30, "T" : 0.30, "G" : 0.20, "C" : 0.20},
    "E2" : {"A" : 0.30, "T" : 0.30, "G" : 0.20, "C" : 0.20},
    "E3" : {"A" : 0.30, "T" : 0.30, "G" : 0.20, "C" : 0.20},
    "I1" : {"A" : 0.10, "T" : 0.10, "G" : 0.40, "C" : 0.40},
    "I2" : {"A" : 0.10, "T" : 0.10, "G" : 0.40, "C" : 0.40},
    "I3" : {"A" : 0.10, "T" : 0.10, "G" : 0.40, "C" : 0.40},
    }

def print_dptable(V):
    print("         ", end = "")
    for i in range(len(V)):
        print(i, end = "      ")
    print("\n")

    for st in V[0].keys():
        print(st, end = " ")
        for ob in range(len(V)):
            print('{:.10f}'.format(V[ob][st]), end = " ")
        print("\n")

# log(XY) = log(X) + log(Y)
def viterbi(obs, states, start_p, trans_p, emit_p):

    logV = [{}]

    logpath = {}

    # initialize base cases
    for st in states:
        # logV[0][st] = math.log(start_p[st]) + math.log(emit_p[st][obs[0]])
        logV[0][st] = start_p[st] + emit_p[st][obs[0]]
        logpath[st] = [st]

    # run viterbi for t > 0
    for ob in range(1, len(obs)):

        # print("steps : " + str(ob))
        # V.append({})
        logV.append({})

        # newpath = {}
        lognewpath = {}

        for st in states:
            # (prob, state)     = max([(V[ob - 1][i] * trans_p[i][st] * emit_p[st][obs[ob]], i) for i in states])
            (log_prob, log_state) = max([(logV[ob - 1][i] + math.log(trans_p[i][st]) + math.log(emit_p[st][obs[ob]]), i) for i in states])

            # V[ob][st] = prob
            logV[ob][st] = log_prob

            # newpath[st] = path[state] + [st]
            lognewpath[st] = logpath[log_state] + [st]


        # path = newpath
        logpath = lognewpath
    
    # print_dptable(V)
    # (prob, state) = max([(V[len(obs) - 1][st], st) for st in states])
    (log_prob, log_state) = max([(logV[len(obs) - 1][st], st) for st in states])
    # return (prob, path[state])

    # return (log_prob, logpath[log_state])
    return logV[-1]

# start_probability = {"N" : 0.30, "E1" : pow(10, -1), "E2" : pow(10, -1), "E3" : pow(10, -1), "I1" : 0.90, "I2" : 0.70, "I3": 0.01}

# print(viterbi(list_sequence, states, start_probability, transition_probability, emission_probability))

def viterbi_g(states, start_p, trans_p, emit_p, gfa_file, segment_id):

    obs = list(gfa_file[0][segment_id - 1][1])
    logV = [{}]

    logpath = {}

    # initialize base cases
    for st in states:
        # logV[0][st] = math.log(start_p[st]) + math.log(emit_p[st][obs[0]])
        logV[0][st] = start_p[st] + emit_p[st][obs[0]]
        logpath[st] = [st]

    # run viterbi for t > 0
    for ob in range(1, len(obs)):

        # print("steps : " + str(ob))
        # V.append({})
        logV.append({})

        # newpath = {}
        lognewpath = {}

        for st in states:
            # (prob, state)     = max([(V[ob - 1][i] * trans_p[i][st] * emit_p[st][obs[ob]], i) for i in states])
            (log_prob, log_state) = max([(logV[ob - 1][i] + math.log(trans_p[i][st]) + math.log(emit_p[st][obs[ob]]), i) for i in states])

            # V[ob][st] = prob
            logV[ob][st] = log_prob

            # newpath[st] = path[state] + [st]
            lognewpath[st] = logpath[log_state] + [st]

        # path = newpath
        logpath = lognewpath
    
    # print_dptable(V)
    # (prob, state) = max([(V[len(obs) - 1][st], st) for st in states])
    (log_prob, log_state) = max([(logV[len(obs) - 1][st], st) for st in states])
    # return (prob, path[state])

    print(log_prob, logpath[log_state])
    return logV[-1]

