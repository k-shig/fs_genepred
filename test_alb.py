
# -*- coding:utf-8 -*-

import math
import numpy as np

inf = math.inf

# convert DNA sequence to the list of numbers 0, 1, 2, 3
def seq2num(seq):
    seq_u = seq.upper()
    num_list = np.empty(len(seq_u)) 
    for i in range(len(seq_u)):
        if seq_u[i] == "A":
            num_list[i] = 0
        elif seq_u[i] == "T":
            num_list[i] = 1
        elif seq_u[i] == "G":
            num_list[i] = 2
        elif seq_u[i] == "C":
            num_list[i] = 3
    return num_list.astype(np.int32)

def viterbi(A, C, B, O):
    """Viterbi algorithm for solving the uncovering problem

    Notebook: C5/C5S3_Viterbi.ipynb

    Args:
        A: State transition probability matrix of dimension I x I
        C: Initial state distribution  of dimension I
        B: Output probability matrix of dimension I x K
        O: Observation sequence of length N

    Returns:
        S_opt: Optimal state sequence of length N
        D: Accumulated probability matrix
        E: Backtracking matrix
    """
    I = A.shape[0]    # Number of states
    N = len(O)  # Length of observation sequence

    # Initialize D and E matrices
    D = np.zeros((I, N))
    E = np.zeros((I, N-1)).astype(np.int32)
    D[:, 0] = np.multiply(C, B[:, 0])

    # Compute D and E in a nested loop
    for n in range(1, N):
        for i in range(I):
            temp_product = np.multiply(A[:, i], D[:, n-1])
            D[i, n] = np.max(temp_product) * B[i, O[n]]
            E[i, n-1] = np.argmax(temp_product)

    # Backtracking
    S_opt = np.zeros(N).astype(np.int32)
    S_opt[-1] = np.argmax(D[:, -1])
    for n in range(N-2, 0, -1):
        S_opt[n] = E[int(S_opt[n+1]), n]

    return S_opt, D, E

def viterbi_log(A, C, B, O):
    """Viterbi algorithm (log variant) for solving the uncovering problem

    Notebook: C5/C5S3_Viterbi.ipynb

    Args:
        A: State transition probability matrix of dimension I x I
        C: Initial state distribution  of dimension I
        B: Output probability matrix of dimension I x K
        O: Observation sequence of length N

    Returns:
        S_opt: Optimal state sequence of length N
        D_log: Accumulated log probability matrix
        E: Backtracking matrix
    """
    I = A.shape[0]    # Number of states
    N = len(O)  # Length of observation sequence
    tiny = np.finfo(0.).tiny
    A_log = np.log(A + tiny)
    C_log = np.log(C + tiny)
    B_log = np.log(B + tiny)

    # print(A_log)

    # Initialize D and E matrices
    D_log = np.zeros((I, N))
    E = np.zeros((I, N-1)).astype(np.int32)
    D_log[:, 0] = C_log + B_log[:, 0]

    # Compute D and E in a nested loop
    for n in range(1, N):
        for i in range(I):
            temp_sum = A_log[:, i] + D_log[:, n-1]
            D_log[i, n] = np.max(temp_sum) + B_log[i, O[n]]
            E[i, n-1] = np.argmax(temp_sum)

    # Backtracking
    S_opt = np.zeros(N).astype(np.int32)
    S_opt[-1] = np.argmax(D_log[:, -1])
    for n in range(N-2, 0, -1):
        S_opt[n] = E[int(S_opt[n+1]), n]

    return S_opt, D_log, E
    # return D_log[:, -1]


def viterbi_log_g(start_probability, gfa, segment_id, is_first):

    # Define model parameters

    # np_transition_probability
    # A = np.array([[0.8, 0.1, 0.1], 
    #               [0.2, 0.7, 0.1], 
    #               [0.1, 0.3, 0.6]])
    transition_probability = np.array(
        [[0.90, 0.10, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.95, 0.0, 0.05, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.95, 0.0, 0.05, 0.0],
        [0.01, 0.94, 0.0, 0.0, 0.0, 0.0, 0.05],
        [0.0, 0.0, 0.01, 0.0, 0.99, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.01, 0.0, 0.99, 0.0],
        [0.0, 0.01, 0.0, 0.0, 0.0, 0.0, 0.99]]
    )

    # np_start_probability 
    # C = np.array([0.6, 0.2, 0.2])
    # C = np.array([0.91, 0.0, 0.0, 0.0, 0.03, 0.03, 0.03])

    # np_emission_probability
    # A0 T1 G2 C3
    # B = np.array([[0.7, 0.0, 0.3], 
    #               [0.1, 0.9, 0.0], 
    #               [0.0, 0.2, 0.8]])
    emission_probability = np.array(
        [[0.10, 0.10, 0.40, 0.40],
        [0.30, 0.30, 0.20, 0.20],
        [0.30, 0.30, 0.20, 0.20],
        [0.30, 0.30, 0.20, 0.20],
        [0.10, 0.10, 0.40, 0.40],
        [0.10, 0.10, 0.40, 0.40],
        [0.10, 0.10, 0.40, 0.40]]
    )


    O = seq2num(gfa[segment_id][1])

    I = transition_probability.shape[0]    # Number of states
    N = len(O)  # Length of observation sequence
    tiny = np.finfo(0.).tiny
    transition_probability_log = np.log(transition_probability + tiny)

    if is_first == True:
        start_probability_log = np.log(start_probability + tiny)
    else:
        start_probability_log = start_probability

    emission_probability_log = np.log(emission_probability + tiny)

    # Initialize D and E matrices
    # D : viterbi DP matrix
    # E : optimal state matrix

    D_log = np.zeros((I, N))
    E = np.zeros((I, N-1)).astype(np.int32)
    # D_log[:, 0] = start_probability_log + emission_probability_log[:, 0]

    if is_first == True:
        D_log[:, 0] = start_probability_log + emission_probability_log[:, 0]

    else:
        for i in range(I):
            temp_sum = transition_probability_log[:, i] + start_probability_log
            D_log[i, 0] = np.max(temp_sum) + emission_probability_log[i, O[0]]
            E[i, 0] = np.argmax(temp_sum)

    # Compute D and E in a nested loop
    for n in range(1, N):
        for i in range(I):
            temp_sum = transition_probability_log[:, i] + D_log[:, n-1]
            D_log[i, n] = np.max(temp_sum) + emission_probability_log[i, O[n]]
            E[i, n-1] = np.argmax(temp_sum)

    # Backtracking
    S_opt = np.zeros(N).astype(np.int32)
    S_opt[-1] = np.argmax(D_log[:, -1])
    for n in range(N-2, 0, -1):
        S_opt[n] = E[int(S_opt[n+1]), n]

    # return S_opt, D_log, E
    return D_log[:, -1]

# Define model parameters

# np_transition_probability
# A = np.array([[0.8, 0.1, 0.1], 
#               [0.2, 0.7, 0.1], 
#               [0.1, 0.3, 0.6]])
transition_probability = np.array(
    [[0.90, 0.10, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.0, 0.0, 0.95, 0.0, 0.05, 0.0, 0.0],
    [0.0, 0.0, 0.0, 0.95, 0.0, 0.05, 0.0],
    [0.01, 0.94, 0.0, 0.0, 0.0, 0.0, 0.05],
    [0.0, 0.0, 0.01, 0.0, 0.99, 0.0, 0.0],
    [0.0, 0.0, 0.0, 0.01, 0.0, 0.99, 0.0],
    [0.0, 0.01, 0.0, 0.0, 0.0, 0.0, 0.99]]
)

# np_start_probability 
# C = np.array([0.6, 0.2, 0.2])
start_probability = np.array([0.91, 0.0, 0.0, 0.0, 0.03, 0.03, 0.03])

# np_emission_probability
# A0 T1 G2 C3
# B = np.array([[0.7, 0.0, 0.3], 
#               [0.1, 0.9, 0.0], 
#               [0.0, 0.2, 0.8]])
emission_probability = np.array(
    [[0.10, 0.10, 0.40, 0.40],
    [0.30, 0.30, 0.20, 0.20],
    [0.30, 0.30, 0.20, 0.20],
    [0.30, 0.30, 0.20, 0.20],
    [0.10, 0.10, 0.40, 0.40],
    [0.10, 0.10, 0.40, 0.40],
    [0.10, 0.10, 0.40, 0.40]]
)
# observation_list
seq = "TATTAGGTCTATGGAAGCCTAAGTTAAAACGCCAGCCTGGCCTTAAAATTACCTCCGCCTGCCTTTCGCCTCAATCGATGCCTTATGCAAATTTTTTTTTATTTCTAAATTTTTCTCATCAAATTAATAAAAATGAGAAAATTGAATATTTGCAAGTTCTCGCGGGCAGGTTTCAAGCAGGCGTTAGTTTTTGGCTCCCCCAATTTTTTTTTGAATTTTTATTCCAAAAGTTACAGAACTAAAAGCTCTTTTTTGAAATTTTTAGACTGAAAATCAAAAATTTTAATTTAAAATTTTTTTTTTAATTTAAGAACTCAAAAAATGAAAGTTTGGTCGTTTTCCGAATATTTAAACAAAATCTACTGGGAATCTATTTGGATTTTAAAATATTATAAAGAACTGTTTTTGTTGTAAATGTAGATTTGAAAAGTTCAACAAAATAAATTTCTTACAATTTTTTTTTCAGTATTTGTTTTTTTTTGTTGCAAGAATCGTGAAAAAATATTTTTTGAAACATTTTCGGAAGCCTGATCTTATTTATACTCTTTTAGCGAACAATTTTTCAAACAAAAGTTATTTTCAAAAAAATGTTCCTAAAAAATAATTTAAAATTAAAAAAAAATTACAGAAAAAATCCCCAGTTTTTAGAAAATTAAATTTTAGAAATTAGGAAAATTCCAAAACTCTGTGATTGTCACATTCCAAGCAGGGTGTGCGGCTGATTGATTTTTTTGGTTGTCGGCTGGTAGCACTAAAATGGGTAGAGCCGGTTTTAAATTTTCTTCCTGTACCGTTCCAATTTGTTACTATCAGTAAACTCCCCCTTAGTCACCGTATTATTGGAAAAAAGTGTTCCTGTAAATATTTGTTATCAATTTTGAAATGTTGCGTATGTATAAATAACATCTTTTTTGACCGTTTTAATCATTGCGTTTCAAAATTTCAATTTCTAAATATTCAAATATTTTCAGGTCAACTAAAACTCTAAGGCGCACGAGCAATGCGCTCAAAACATGTGCTGTACATAGCTATACTGTTCAGTTCAATTTTTGGAGGGAAAGGTGAGTGGAATTACGTGGCCTAGAAAACCTCCTGACCTAGAATTTATTCCACATAGCTAAGACTAGGCAAAAAAATATTTAAAAATGGGTGGCCTAGAAATATCGTTTTTTATAAGCAGGCAAATTGCATGATCGGTGCCGTCATGGTCTAGGTTGTTGGATGACCAAAAAAATTCCTTTCGGAGGACCGGGTGGAAAATTTGTCAACAGAGCGGACCTGCTATCTTAAATGTTTAAGAGGCTTTTGATCTTGAGCCGATCTTTGAAAATGTGTTCAAGATCTGTTCAAATAGTAGCTGATTTCTTGTAAAGAGAGACTAATTGCAAACAGTTAAGGAAGATGGACACCAAGTGCGCTATATTGATAATTTTTGGAATAGCTCAATTGAACGTGTCTGTACTATTTTCTGTGCTAGATTTTCAAAATGTTAGGTTAAAAATGAATGGGATAAAAATTACAAAAAAATGTTCAAAAATTCTCAAATTGCGTATTTCAAAACTTCAAATTCCAAACAAAAATTTTCCTTGTCCGCAACATTTCTGCCCCTCCAAAATTTCAAAATCACTGATAGCTGTTTACTGATAAGCTCTGTGTGCCACCCGGTGTCTGTGTTCTTTTTCATAAAAATCACATAGTTTACCTAAGAAAGTGTTCATGTTTACACCTAAATAACAAAATGTGTATCTTTCGAATTTCAACAAAGTGGTGGTTTCCCAACCAATTTTGGAAAAATTCCTGAAATTCCCGAGTTATCAGGAACAATTTCCTGTTTTACTGACCTTGCCATCGTCGCCCAATACAAGAAAAAGGATAAAATGTACAAAAAATAGGCAAACAAACAGAATAAATATAGGTGCGAAAATGATACGAAAATAATTGTTTCGGGTGGCGGGGCAAATGTTTGCTCTGCTCCGCTACTGACCGGAAATTTGCGCGTTCAGTGAGAAAATGCACGAATCGGTGTGAAAATGTAGTGAAGGGAGCATGTGTGACCTAGAAATTTCAATAAGGAACCTAGGCCATCATATAGATTTTGGTGGCCTGGAAATCAAAAACTCGTAACATTTATCTTTTCAGGAATCCAACAAAATGAGGAATTTCAAAGATACGACGGATGGTACAACAATCTGGCGAATAGTGAATGGGGTTCTGCTGGTAGGTTTTTTCGGAAGAGAAATGACGTTACATTGACCTACTCCTTCAGGAAGTCGGCTGCATAGAGATGCACGTTCCTACTACTCAGACGGTGTATATTCAGTGAATAACTCACTTCCGTCCGCCCGTGAACTCTCCGATATACTATTCAAAGGAGAGTCCGGTATACCTAATACAAGAGGATGCACGACTTTATTGGCATTTTTCAGTTCGTTTTTATTGCCCTCTACCTCAAAAATTAGTAATAATAATTATAGGTCAAGTAGTTGCTTATGAAATAATGCAATCAAATGGAGTATCCTGTCCACTAGAGACACTTAAAATTCAAGTACCCCTATGTGATAATGTATTTGATAAAGAATGTGAGGGAAAGACAGAAATCCCATTTACACGTGCCAAATACGATAAAGCAACTGGAAATGGGCTCAACTCACCTCGAGAACAAATCAATGAACGGACTTCATGGATTGATGGATCATTCATCTATGGTACCACCCAGCCATGGGTGTCCTCATTAAGATCTTTCAAACAAGGGCGGTTGGCTGAAGGTGTACCTGGATATCCACCACTTAACAACCCACATATTCCATTGAATAACCCCGCTCCGCCACAAGTACATCGATTGATGAGTCCAGATAGATTATTTAGTGAGTTCATAGTTTTATAGAAAAGTATAAATATTTAAACTTGAAGTGTTGGGAGACTCGCGTGTGAATGAGAATCCAGGTCTTCTCTCATTTGGTCTGATCCTCTTCCGTTGGCATAACTACAATGCAAATCAAATCCATCGAGAACATCCTGACTGGACAGACGAACAAATCTTCCAGGCAGCACGTCGTTTGGTGATTGCATCTATGCAGAAGATTATTGCATATGACTTTGTTCCAGGGCTGTTAGGTTAATCAACTATATTATAATACCTTAAACTCAGTGTTTCTTTTAAGGTGAAGACGTTCGTTTGTCAAACTACACCAAATACATGCCACATGTTCCACCTGGAATCTCGCATGCTTTTGGAGCAGCCGCCTTCAGGTTCCCTCACTCAATTGTGCCACCAGCAATGCTTCTGAGAAAACGAGGAAATAAATGTGAATTCCGGACGGAAGTTGGTGGATATCCTGCATTGAGATTGTGCCAGAATTGGTGGAATGCGCAGGATATTGTAAAGGAGTACAGTGTGGATGAGATTATTCTTGGTTAGTTCATGCTTGAGTGGTTATATAATAAAGGTTGTAATTTCAGGAATGGCAAGCCAGATAGCTGAACGAGATGATAACATAGTAGTTGAAGATCTTCGTGATTACATCTTCGGACCAATGCATTTCTCTCGTTTGGATGTTGTTGCTTCATCAATAATGAGAGGAAGGGACAATGGAGTACCACCGTATAATGAATTGAGAAGAACATTCGGACTTGCGCCAAAGACATGGGAGACAATGAATGAAGACTTTTACAAGAAGCATACTGCAAAGGTGGAGAAGTTGAAAGAGTTGTATGGAGGCAATATTTTATATTTGGATGCTTATGTAGGAGGGTTAGTTTTGGGTTTAAAGTGGAATGCTTAACTTAAAATGCGGTGAATTCGAAGAGTTTCAAGCAAAAACAATGAAAATCAATTCGTTTTAACATAACTGATTGGTTTAAGAAGTGTGGAATTTTGAATATTCACTAAATCTTCTCAAGGGTTAAAAAGTTCTCACGAGTAAACTTCTAACGGCTTCTTTTGGTCAAACTCTAAAATTTGTAGCAGGCATAAACTCTGGAAGTTGTATGTCACCTCAGTTTTATAGTGCAATTCCTTCGGTATTTCAAACGTTACCCATGCAAGGTAGTTTTTTTTGCAAATCTAGGCAGAATAAATTACGCATACTTGTTTCTTTCTCAGTGCACATATATTGGATTACGTTAATCAAACGTTATTATTTTAGAATGCTGGAAGGAGGTGAAAATGGGCCTGGAGAGTTGTTCAAAGAAATCATAAAGGATCAATTCACCCGTATTCGTGATGGAGATAGATTCTGGTTTGAGAATAAATTGAATGGATTATTCACTGATGAAGAAGTTCAAATGATTCATAGTATTACACTTCGAGATATTATCAAAGCAACCACCGATATCGATGAGACAATGCTTCAGAAGGATGTAAGTTACTTTCCAAATTTAATGGTTTATTATTATGTTCTTTTGAATTCCGCATTGCAATGTATTTATCACTCCAGGTATTCTTCTTCAAGGAAGGTGACCCGTGCCCGCAACCATTCCAAGTGAACACAACTGGACTTGAACCATGTGTTCCATTTATGCAATCAACTTATTGGACTGATAATGACACCACTTATGTTTTCACCCTAATTGGATTAGCATGTGTGCCATTAAGTGAGCTATTGCATCTAGTTCCATACAAACCAAAATGCTTTCAGTTTGCTATGGAATTGGCCGATACTTGGTTAATCGTCGCATTGCTATTGGCCACAACAGTGCTTGTGACAGCCTAACTACTGACTTTGCAAATGATGATTGTGGCGCGAAGGGAGATATTTATGGTGTAAATGCTTTGGAATGGCTTCAAGAAGAGTACATACGACAGGTCAGGATAGAAATAGAAAACACCACGTTGGCAGTAAAGAAGCCACGCGGTGGAATCCTTCGAAAAATTCGTTTTGAAACTGGACAGAAGATTGAGTTATTCCACTCTATGCCGAATCCATCAGCAATGCACGGACCATTTGTACTTCTGTCTCAAAAGAATAATCATCATTTGGTGATAAGATTGTCGTCTGATAGAGATTTATCTAAATTTTTGGATCAAATTAGACAGGCGGCTAGTGGAATCAATGCAGAGGTTATCATAAAGGATGAGGAGAATTCTGTGAGTTTACTTCAAGAAATACGTTGAATCTGGAAATTATTTCAGATTCTCTTATCCCAAGCAATCACAAAAGAACGCCGTCAAGACCGACTGGACCTGTTCTTCCGTGAAGCCTACGCAAAAGCATTCAATGATAGTGAACTTCAAGATTCGGAAACTTCATTTGACTCATCAAATGATGATATATTAAATGAGACAATATCTCGTGAGGAACTGGCAAGTGCAATGGGAATGAAAGCGAATAATGAGTTTGTGAAGAGAATGTTCGCGATGACTGCAAAACATAATGAGGATTCGCTCAGTTTCAATGAGTTTTTGACAGTCTTGAGAGAGTTTGTTAATGGTGAGTATTTCAGCATAAATTTGTTGTGATACAAAGACTACGTTCTAGAATGTTCCGGCGTGTTTCCCATTAACATAAGTTCTAATTGAATAAATATAATTTCTTAATGCAGCTTAATTACGTGTAACAGCAGTAGCGGTAAAGTTGTTTTGAACTGTCTTTGATTTTGTACGTACAAAACTACATATAAAAGGTTTTGGTTCAAGAGAGCCGAAGTCTCCTGCGAAAAGAAATTTATTTCTTCTGATCTGAATTTAAACTAGGCCGGGATTAGCGACCGATTAACATTTTGTAGGTTCATTAGCCGTGAGGTGAAACTCGGTGTCCTATGGTCGGCAATATTTCGAGATAGTAAAAGTTCTAAAGGTTATTTATTCTGAATCTGAATTTATTCGGGGGAGTCCTATAGAATTTGCGAGCACTGTAGAAAGTTCTCGTGTGACAGGGAGGTCACAACTAATATGGCATCAAAGTATTGAGAATTTAGTCAATTGTAGATTTTCTTTTACTGAACAGTAGAAAAACCAACACTGCCTTTAAAAAATGTTATGCACCACCTACTTTAATTTCCAGCTCCTCAAAAGCAAAAACTGCAAACTCTATTCAAAATGTGTGATTTGGAGGGAAAGAACAAGGTACTCCGAAAGGATCTCGCGGAACTCGTCAAGTCCCTCAATCAAACCGCTGGAGTTCACATTACTGAAAGTGTGCAGCTTCGATTATTCAATGAAGTGTTGCACTATGCAGGAGTGAGCAATGATGCCAAGTACCTGACTTACGACGATTTCAATGCTCTGTTCTCGGATATACCTGACAAGCAACCAGTTGGACTGCCGTTCAATCGAAAGAACTATCAGCCAAGTATTGGAGAGTGAGTATTCAGGAGGACTCTGACTGTATAACAATTATAACTTTTAGAACATCTTCTCTGAACTCATTTGCCGTCGTGGATCGATCCATCAACAGTTCAGCACCGCTAACTTTGATCCACAAAGTTTCAGCGTTCTTGGAGACCTATCGCCAACACGTTTTCATTGTCTTCTGCTTTGTTGCCATCAATCTTGTTCTTTTCTTCGAACGGTTTTGGCGTAAGTTCATATAATTGGGAGCTCATGTTAATTTAGTTTTCAGATTATCGTTACATGGCGGAAAACAGGGATCTCCGACGAGTAATGGGAGCTGGAATCGCTATTACTCGTGGTGCCGCGGGAGCCTTGTCATTTTGCATGGCGTTGATATTGCTGACAGTTTGTAGAAACATAATCACACTTCTTCGAGAGACAGTCATTGCGCAGTATATTCCATTTGACTCGGCTATTGCGTTCCACAAGGTGAGAAACGTTAGGGCAGCGTGTAACACATTTTTTAAATATTATTATTGCATTAGTAAATTTTGTCAAATCAGTTGTTTTTAAAAATATTTAGCATGTTCAGATATAAGGGAAAACTTGTTATTTTATTATCTGTACAGTAATGCGGAGGTTTAATGCAAGTAGGATAACTGTACTGTGCATACCCAATGTTTTGAAAAGATTTTTTAAAATAGAATACAAGCATGAAAGGAAAGATCTTTGCATCGAACATGGTGTTTCTCAGCCAGATGTGAACTTATGATATAGCGATGTTATCCTAAACTTGTAAGTGTTTAATTTTTTTAAATTTATTACGATAGTAAGATATCGTGAGGTAGAAAAAAAACACACATTAATAGATACAAACCATCACAAGTGGTTACATAAATAAAAATGGAACAAAAATAAAAAGAGATGAGAAAAAAAATAATGGCTACATTGGAGAAGAAGCAAAAAACACAAATATCGATGTATAAAAGGCAAGAATAAATGATGAATAGAAGTGAGGATAAGGTAACATTAGATCAGTGTTGCTTCATTGTGTGTAGTGTTCTGTTGACAAAAAAGTGTCTCCTAAGTTTAGATTTTCCTGTGCTCCAGATATATTTCTTTTTAGAACGAGTGTGGGTCTCTTGTTGCTCAAAAAACTCAGATGTTTTTAAGTCTACTTTACATATAAGTGTTCTGTAGAGAGGGCAGATTTTTGAATAAAAAAATAAACTATGATAAACAATGGGAAAACTAATATTTCGGACAAAGTATTGTTTATTATGACCGCCAGTATCAAAAACTCTATAATAACTGAACATTTCTAGATCGTTGCGCTCTTTGCGGCTTTCTGGGCCACTCTTCACACCGTTGGACATTGTGTCAATTTCTATCACGTTGGAACTCAAAGTCAAGAAGGTCTTGCTTGTCTCTTTCAGGAAGCATTCTTTGGGTAATACTTTACTTGAATTCATTTTTGCATTCAATCTTACTAGAATACGCACCATTAACAAACTCCCTCAAGACTGTCAACAACTTTCATCAAATAACTTTCAGATCCAACTTCCTTCCTTCAATCAGTTACTGGTTCTTCAGCACAATTACAGGTCTGACAGGAATTGCATTGGTCGCTGTCATGTGCATCATTTATGTTTTCGCGTTACCATGTTTCATTAAGAGAGCTTATCACGCATTCCGGCTCACACATCTTCTCAATATTGCCTTTTACGCACTTACTCTTCTTCATGGGCTTCCAAAGTTGTTGGATGTGAGTTTTTGCCACTGTTCGGTTCAAGAAGTTTCTTCAATATTTGTTACAGTCTCCCAAATTTGGCTACTACGTTGTTGGTCCCATCGTGTTATTTGTAATTGATCGCATAATTGGTTTGATGCAATATTACAAAAAATTAGAAATTGTAAACGCAGAAATCCTTCCATCAGATATTATATACATCGAGTACCGTCGTCCAAGAGAGTTTAAATATAAATCAGGACAATGGGTTACTGTATCATCACCATCAATATCATGTACCTTTAATGAATCTCACGCATTCTCGATTGCCTCAAGTCCACAGGATGAGAATATGAAGTTGTATATAAAAGCAGTTGGACCATGGACATGGAAGTTGAGAAGCGAATTGATAAGATCATTGAATACAGGATCGCCATTTCCATTAATCCATATGAAAGGACCATATGGTGATGGTAACCAAGAATGGATGGATTATGAAGTTGCAATAATGGTTGGAGCAGGAATCGGAGTGACTCCATATGCATCGACACTTGTTGATCTTGTACAACGAACATCAAGTGACTCATTTCACAGAGTTCGTTGCCGTAAAGTATATTTCCTATGGGTGTGCTCAACTCACAAGAACTATGAATGGTTTGTGGATGTGCTCAAGAACGTGGAAGACCAAGCAAGGTCGGGAATTTTGGAGACACATATCTTTGTCACTCAGACGTTCCACAAGTTTGATTTGAGAACTACTATGCTTGTGAGTTTATTGAAGATAATTTTCAAAATCAAACGTCAGGTTTGGTTATAAACTGATTAAAGCGGACGCATTTAAACGCAGTGGCATCTTAAGGTCTGAAGCTTTTAAACTTTAACATCTTATTTGCAGTACATTTGCGAGAAGCACTTCCGTGCCACCAACTCAGGAATTTCAATGTTTACTGGTCTCCACGCTAAGAACCATTTCGGACGGCCCAACTTCAAAGCTTTCTTCCAATTTATTCAGAGTGAACATAAGGAGGTTAGTTAAATGCTTTTTAACCTCTAAATAAAGCAAATTTGCAGCAATCCAAAATCGGAGTGTTCAGTTGTGGACCTGTAAACTTGAATGAAAGTATAGCTGAAGGATGTGCAGATGCCAACCGACAACGAGATGCTCCTTCATTTGCACATCGCTTTGAAACGTTCTAACCTTCCCTATATCATCATTATTATACATATTTTATGCTTCTTTGAGTATTCTGTGCCAGCTTTACATTTTCTGTCTAGACTTCATTTTTTTTCATTCACTGTTTTATGGGTAACAACAACAATGACTTTTAATTTTGAATAGATGTATATACAACTAAAAAGAAACAGCTCCTCCGAATAGGCTCCGCTTGTCGAGACCGGCAATTGAACGTGAGGCGGCGGTGGAGTAGAACTGGAAAAATAGGAAAAGCTTGTTGGAAGTAAGAAGTTGTGACTAATCAATAATTAGGGCCTATGCCTTGGGTATTTGGGTGTACATCTCTGATGAATCTAAATTTTTTTGGAATCATCGCTAGTAACCTTTCTCTACAATATTCATATTATGAAATACCGACCTTGTAATCAGGCTTGTCACTTTTTCGTTTTCGAATTTTCGTTTTTTCGTTATTTTCGGGTTTTTGGCGAAAATGATTTTTTCGTTTTCGTTTTCGAAAATTT"
# O = np.array([0, 2, 0, 2, 2, 1]).astype(np.int32)
O = seq2num(seq).astype(np.int32)

# Apply Viterbi algorithm
# S_opt, D, E = viterbi_log(transition_probability, start_probability, emission_probability, O)
#
# print('Observation sequence:   O = ', O)
# print('Optimal state sequence: S = ', S_opt)
# np.set_printoptions(formatter={'float': "{: 7.4f}".format})
# print('D =', D, sep='\n')
# np.set_printoptions(formatter={'float': "{: 7.0f}".format})
# print('E =', E, sep='\n')